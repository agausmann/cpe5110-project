// Where A and B are n-bit values:
Booth3(A, B, n):
    1. Shift B left, inserting zero for LSB.
    2. Let PQ = 0 (double register).
    3. Let m = ceil((n + 1) / 3).
    4. Let k = 0.
    5. Shift PQ right 2 bits, preserving sign.
    6. Match against the lower 3 bits of B:
        000 or 111 => no action.
        001 => Add A to P.
        010 => Add 2*A to P.
        011 => Add 3*A to P.
        100 => Subtract 3*A from P.
        101 => Subtract 2*A from P.
        110 => Subtract 1*A from P.
    7. Shift B right 2 bits, preserving sign.
    8. Increment k.
    9. If k < m, repeat from step 5.
    10. Shift PQ right ((n + 1) mod 3) bits, preserving sign.
    11. Return the contents of PQ.

Booth4(A, B, n):
    1. Shift B left, inserting zero for LSB.
    2. Let PQ = 0 (double register).
    3. Let m = ceil((n + 1) / 4).
    4. Let k = 0.
    5. Shift PQ right 3 bits, preserving sign.
    6. Match against the lower 4 bits of B:
        0000 or 1111 => no action.
        001 => Add A to P.
        0010 => Add 2*A to P.
        0011 => Add 3*A to P.
        0100 => Add 4*A to P.
        0101 => Add 5*A to P.
        0110 => Add 6*A to P.
        0111 => Add 7*A to P.
        1000 => Subtract 7*A from P.
        1001 => Subtract 6*A from P.
        1010 => Subtract 5*A from P.
        1011 => Subtract 4*A from P.
        1100 => Subtract 3*A from P.
        1101 => Subtract 2*A from P.
        1110 => Subtract 1*A from P.
    7. Shift B right 3 bits, preserving sign.
    8. Increment k.
    9. If k < m, repeat from step 5.
    10. Shift PQ right ((n + 1) mod 4) bits, preserving sign.
    11. Return the contents of PQ.